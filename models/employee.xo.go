// Package models contains the types for schema 'public'.
package models

// Code generated by xo. DO NOT EDIT.

import (
	"database/sql"
	"errors"
)

// Employee represents a row from 'public.employee'.
type Employee struct {
	EmpID     int           `json:"emp_id"`     // emp_id
	EmpNumber sql.NullInt64 `json:"emp_number"` // emp_number

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the Employee exists in the database.
func (e *Employee) Exists() bool {
	return e._exists
}

// Deleted provides information if the Employee has been deleted from the database.
func (e *Employee) Deleted() bool {
	return e._deleted
}

// Insert inserts the Employee to the database.
func (e *Employee) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if e._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key must be provided
	const sqlstr = `INSERT INTO public.employee (` +
		`emp_id, emp_number` +
		`) VALUES (` +
		`$1, $2` +
		`)`

	// run query
	XOLog(sqlstr, e.EmpID, e.EmpNumber)
	err = db.QueryRow(sqlstr, e.EmpID, e.EmpNumber).Scan(&e.EmpID)
	if err != nil {
		return err
	}

	// set existence
	e._exists = true

	return nil
}

// Update updates the Employee in the database.
func (e *Employee) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !e._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if e._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE public.employee SET (` +
		`emp_number` +
		`) = ( ` +
		`$1` +
		`) WHERE emp_id = $2`

	// run query
	XOLog(sqlstr, e.EmpNumber, e.EmpID)
	_, err = db.Exec(sqlstr, e.EmpNumber, e.EmpID)
	return err
}

// Save saves the Employee to the database.
func (e *Employee) Save(db XODB) error {
	if e.Exists() {
		return e.Update(db)
	}

	return e.Insert(db)
}

// Upsert performs an upsert for Employee.
//
// NOTE: PostgreSQL 9.5+ only
func (e *Employee) Upsert(db XODB) error {
	var err error

	// if already exist, bail
	if e._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO public.employee (` +
		`emp_id, emp_number` +
		`) VALUES (` +
		`$1, $2` +
		`) ON CONFLICT (emp_id) DO UPDATE SET (` +
		`emp_id, emp_number` +
		`) = (` +
		`EXCLUDED.emp_id, EXCLUDED.emp_number` +
		`)`

	// run query
	XOLog(sqlstr, e.EmpID, e.EmpNumber)
	_, err = db.Exec(sqlstr, e.EmpID, e.EmpNumber)
	if err != nil {
		return err
	}

	// set existence
	e._exists = true

	return nil
}

// Delete deletes the Employee from the database.
func (e *Employee) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !e._exists {
		return nil
	}

	// if deleted, bail
	if e._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM public.employee WHERE emp_id = $1`

	// run query
	XOLog(sqlstr, e.EmpID)
	_, err = db.Exec(sqlstr, e.EmpID)
	if err != nil {
		return err
	}

	// set deleted
	e._deleted = true

	return nil
}

// EmployeeByEmpID retrieves a row from 'public.employee' as a Employee.
//
// Generated from index 'employee_pkey'.
func EmployeeByEmpID(db XODB, empID int) (*Employee, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`emp_id, emp_number ` +
		`FROM public.employee ` +
		`WHERE emp_id = $1`

	// run query
	XOLog(sqlstr, empID)
	e := Employee{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, empID).Scan(&e.EmpID, &e.EmpNumber)
	if err != nil {
		return nil, err
	}

	return &e, nil
}
